# =============================================================================
# AUTHENTICATION - API Tests (Standardized Responses)
# =============================================================================
# Base URL: http://localhost:3001
# Prefix: /auth
# Response structure: { success, message, code, data?, error? }
# =============================================================================

@baseUrl = http://localhost:3001
@authPrefix = /auth

# =============================================================================
# 1. USER REGISTRATION
# =============================================================================

### Registration - Valid user
POST {{baseUrl}}{{authPrefix}}/register
Content-Type: application/json

{
  "name": "John Silva",
  "email": "joao.silva@example.com",
  "password": "MinhaSenha123!"
}

### Registration - Invalid data (missing name)
POST {{baseUrl}}{{authPrefix}}/register
Content-Type: application/json

{
  "email": "teste@example.com",
  "password": "senha123"
}

### Registration - Injection attempt
POST {{baseUrl}}{{authPrefix}}/register
Content-Type: application/json

{
  "name": "'; DROP TABLE users; --",
  "email": "sql@example.com",
  "password": "senha123"
}

### Registration - Email already registered
POST {{baseUrl}}{{authPrefix}}/register
Content-Type: application/json

{
  "name": "John Silva 2",
  "email": "joao.silva@example.com",
  "password": "OutraSenha123!"
}

# =============================================================================
# 2. LOGIN
# =============================================================================

### Login - Valid credentials
POST {{baseUrl}}{{authPrefix}}/login
Content-Type: application/json

{
  "email": "joao.silva@example.com",
  "password": "MinhaSenha123!"
}

### Login - Invalid data (missing email)
POST {{baseUrl}}{{authPrefix}}/login
Content-Type: application/json

{
  "password": "senha123"
}

### Login - Incorrect credentials
POST {{baseUrl}}{{authPrefix}}/login
Content-Type: application/json

{
  "email": "joao.silva@example.com",
  "password": "senhaerrada"
}

### Login - User not found
POST {{baseUrl}}{{authPrefix}}/login
Content-Type: application/json

{
  "email": "naoexiste@example.com",
  "password": "senha123"
}

# =============================================================================
# 3. PROTECTED ROUTES
# =============================================================================

### User profile - With valid token
GET {{baseUrl}}{{authPrefix}}/me
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ODkwMTIzNDU2Nzg5MDEyMzQ1IiwibmFtZSI6Ikpvw6NvIFNpbHZhIiwicm9sZSI6InVzZXIiLCJpYXQiOjE3MzY4MzQ1NjcsImV4cCI6MTczNjkxOTk2N30.example_token_replace_with_real_one

### User profile - Without token
GET {{baseUrl}}{{authPrefix}}/me

### User profile - Invalid token
GET {{baseUrl}}{{authPrefix}}/me
Authorization: Bearer token_invalido

### User profile - User not found
GET {{baseUrl}}{{authPrefix}}/me
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImludmFsaWRfaWQiLCJuYW1lIjoiVGVzdCIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzM2ODM0NTY3LCJleHAiOjE3MzY5MTk5Njd9.invalid_user_token

# =============================================================================
# 4. SECURITY TESTS
# =============================================================================

### SQL Injection attempt in registration
POST {{baseUrl}}{{authPrefix}}/register
Content-Type: application/json

{
  "name": "'; DROP TABLE users; --",
  "email": "sql@example.com",
  "password": "senha123"
}

### XSS attempt in registration
POST {{baseUrl}}{{authPrefix}}/register
Content-Type: application/json

{
  "name": "<script>alert('XSS')</script>",
  "email": "xss@example.com",
  "password": "senha123"
}

### SQL Injection attempt in login
POST {{baseUrl}}{{authPrefix}}/login
Content-Type: application/json

{
  "email": "admin@example.com' OR '1'='1",
  "password": "senha123"
}

# =============================================================================
# 5. PERFORMANCE AND STRESS TESTS
# =============================================================================

### Multiple simultaneous logins (copy and execute in parallel)
POST {{baseUrl}}{{authPrefix}}/login
Content-Type: application/json

{
  "email": "joao.silva@example.com",
  "password": "MinhaSenha123!"
}

### Rate limiting test (execute multiple times quickly)
POST {{baseUrl}}{{authPrefix}}/login
Content-Type: application/json

{
  "email": "joao.silva@example.com",
  "password": "MinhaSenha123!"
}

# =============================================================================
# 6. HEALTH CHECK (not part of auth module, but useful for testing)
# =============================================================================

### Application Health Check
GET {{baseUrl}}/health

# =============================================================================
# USAGE TIPS:
# =============================================================================
# 1. Execute tests in order: registration -> login -> protected routes
# 2. Replace JWT tokens in Authorization headers with real tokens
# 3. Use environment variables for baseUrl if necessary
# 4. Test error scenarios to validate proper handling
# 5. Monitor application logs during testing
# =============================================================================