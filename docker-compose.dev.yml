version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: boilerplate_app_dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - MONGO_URI=mongodb://admin:password@mongodb:27017/boilerplate?authSource=admin
      - JWT_SECRET=hjsgddgdbnasbd23yeasdfb2iq3u1esdKJHSzjdcbs8eho2w12wjasJK
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
    depends_on:
      - mongodb
      - redis
    networks:
      - boilerplate_network
    volumes:
      - .:/app
      - /app/node_modules
    command: pnpm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker.dev
    container_name: boilerplate_queue_worker_dev
    restart: unless-stopped
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/boilerplate?authSource=admin
      - JWT_SECRET=hjsgddgdbnasbd23yeasdfb2iq3u1esdKJHSzjdcbs8eho2w12wjasJK
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - QUEUE_NAME=main
    depends_on:
      - mongodb
      - redis
    networks:
      - boilerplate_network
    volumes:
      - .:/app
      - /app/node_modules
    command: pnpm run worker:queue
    healthcheck:
      test: ["CMD", "pgrep", "-f", "queue.worker.ts"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  mongodb:
    image: mongo:latest
    container_name: boilerplate_mongodb_dev
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: boilerplate
    volumes:
      - mongodb_data:/data/db
    networks:
      - boilerplate_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:latest
    container_name: boilerplate_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - boilerplate_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongodb_data:
  redis_data:

networks:
  boilerplate_network:
    driver: bridge