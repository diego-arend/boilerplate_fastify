version: "3.8"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: boilerplate_app_dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - .env
    depends_on:
      - mongodb
      - redis
    networks:
      - boilerplate_network
    volumes:
      - .:/app
      - /app/node_modules
    command: pnpm run dev
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongodb:
    image: mongo:latest
    container_name: boilerplate_mongodb_dev
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: boilerplate
    volumes:
      - mongodb_data:/data/db
    networks:
      - boilerplate_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:latest
    container_name: boilerplate_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - boilerplate_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Services container for development
  # BullMq Dashboard
  bull-board:
    build:
      context: ./bullDashboard
      dockerfile: Dockerfile
    container_name: bull-dashboard
    ports:
      - "3002:3002"
    environment:
      - REDIS_HOST=redis # O nome do serviço Redis no Compose
    networks:
      - boilerplate_network
    depends_on:
      - redis

  # Fake email server smtp for send email and dashboard for visualize emails
  # mailhog:
  #   image: mailhog/mailhog:latest
  #   container_name: mailhog
  #   ports:
  #     - "1025:1025" # Port server SMTP
  #     - "8025:8025" # Port web interface
  #   # Persist emails
  #   environment:
  #     - MH_STORAGE=maildir
  #     - MH_MAILDIR_PATH=/maildir
  #   volumes:
  #     - mailhog_data:/maildir
  #   networks:
  #     - boilerplate_network

  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    ports:
      - "1025:1025" # Porta SMTP - a mesma que você usa no Nodemailer
      - "8025:8025" # Porta da Interface Web - acesse http://localhost:8025
    restart: unless-stopped
    networks:
      - boilerplate_network

volumes:
  mongodb_data:
  redis_data:
  mailhog_data:

networks:
  boilerplate_network:
    driver: bridge
