# Dockerfile específico para Worker Container
# Reutiliza build do projeto principal e executa apenas o worker

FROM node:22-alpine AS base

# Instalar pnpm
RUN npm install -g pnpm@10.13.1

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build stage
FROM base AS build

# Build the application (incluindo worker)
RUN pnpm run build

# Production stage para Worker
FROM node:22-alpine AS worker-production

# Instalar pnpm na produção
RUN npm install -g pnpm@10.13.1

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S nodejs && \
    adduser -S worker -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install apenas dependências de produção
RUN pnpm install --frozen-lockfile --prod && \
    pnpm cache clean

# Copy aplicação compilada do build stage
COPY --from=build /app/dist ./dist

# Copy environment files se existirem
COPY --chown=worker:nodejs .env* ./

# Mudar ownership do diretório da aplicação
RUN chown -R worker:nodejs /app
USER worker

# Expor porta para health check (opcional)
EXPOSE 3003

# Health check específico para worker
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
  CMD node -e "console.log('Worker health check passed'); process.exit(0)"

# Comando específico para iniciar o worker
CMD ["node", "dist/infraestructure/workers/index.js"]