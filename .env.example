# ==============================================
# ENVIRONMENT CONFIGURATION
# ==============================================

# Environment (required: 'development', 'production', or 'test')
NODE_ENV=development

# Server Configuration (required)
PORT=3001

# ==============================================
# SECURITY CONFIGURATION
# ==============================================

# JWT Secret (required: minimum 32 characters for security)
# Generate a strong random string for production!
JWT_SECRET=your-super-secret-jwt-key-here-must-be-at-least-32-chars

# ==============================================
# DATABASE CONFIGURATION
# ==============================================

# MongoDB Configuration (required)
MONGO_URI=mongodb://admin:password@mongodb:27017/boilerplate?authSource=admin

# ==============================================
# CACHE CONFIGURATION
# ==============================================

# Redis Configuration (required for caching)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# ==============================================
# EMAIL CONFIGURATION
# ==============================================

# SMTP Email Configuration (required for production)
# For development, the system will use Ethereal Email (fake SMTP) if no config is provided

# SMTP Server Settings (required for production)
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-smtp-username
SMTP_PASS=your-smtp-password
EMAIL_FROM=noreply@example.com

# For MailHog (local email testing - default in docker-compose.dev.yml):
# SMTP_HOST=localhost (or 'mailhog' in Docker)
# SMTP_PORT=1025
# SMTP_SECURE=false
# SMTP_USER= (leave empty)
# SMTP_PASS= (leave empty)
# Web interface available at: http://localhost:8025

# Optional Email Pool Settings (for high-volume sending)
EMAIL_POOL=false
EMAIL_MAX_CONNECTIONS=5
EMAIL_MAX_MESSAGES=100

# Email Pool Configuration (optional - for high volume)
EMAIL_POOL=true
EMAIL_MAX_CONNECTIONS=5
EMAIL_MAX_MESSAGES=100
EMAIL_RATE_LIMIT=5

# Development Mode
# In development, you have 3 options for email testing:
# 1. Use MailHog (recommended - included in docker-compose.dev.yml)
#    - Web interface: http://localhost:8025
#    - Captures all emails locally for testing

# ==============================================
# OPTIONAL CONFIGURATIONS
# ==============================================

# Logging Level (optional: fatal, error, warn, info, debug, trace)
LOG_LEVEL=info

# CORS Origin (optional: specific origin or * for all)
# Examples:
# - Single origin: CORS_ORIGIN=http://localhost:3000
# - Multiple origins: CORS_ORIGIN=http://localhost:3000,https://app.example.com
# - All origins (NOT recommended for production): CORS_ORIGIN=*
# - Regex pattern: CORS_ORIGIN=/localhost:\d+/
# CORS_ORIGIN=http://localhost:3000

# CORS Credentials (optional: allow cookies/auth headers)
# WARNING: Never set to true with CORS_ORIGIN=* in production!
CORS_ALLOW_CREDENTIALS=false

# Rate Limiting (optional: protection against abuse and DoS attacks)
RATE_LIMIT_MAX=100              # Maximum requests per time window (default: 100)
RATE_LIMIT_WINDOW_MS=60000      # Time window in milliseconds (default: 60000 = 1 minute)